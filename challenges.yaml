printing:
  name: "Printing in Python"
  text: "Let's get writing our first Python program. On most programming courses, the first program you write tends to output 'Hello, World!' to the screen."
  page:
    text1: "Let's get writing our first Python program. On most programming courses, the first program you write tends to output 'Hello, World!' to the screen. Let's not break that tradition."
    question1:
      name: "question1"
      text: "For your first challenge, you will print \"Hello World!\" to the screen. In Python, this happens through the use of the word <i>print</i> with () on the end. <i>print()</i> will print anything you want to the screen.^lb^
            For example, if you wanted to put \"Hello, Robot\" to the screen, you would write print(\"Hello, Robot\")
            The first part to the solution of the challenge has been given to you. Can you figure out the other part?"
      type: "textbox"
      skeleton: "print(\"\")"
      button: "submit"
      correct: "Hello World!"
      chal_id: "0001"
variables:
  name: "Variables"
  text: "What are variables?"
  page:
    text1: "The last module was not so interesting. That's because you can't really do anything cool in any programming language without using variables. A variable is a way of sorting data in programs."
    text2: "Think of a variable like a box with a label on it. Let's say your box has a label that says \"Box A\". Then you put a whole bunch of socks in the box. If someone asks you for some socks, you can just say \"Oh, you'll wnat to look in Box A\" But if, one day, you decide to remove all the socks and store some shoes in that box instead, you would still refer to that box as \"Box A\". The contents may have changed, but the label or the way of referring to the box remains the same."
    subheading1: "Assigning values to a variable"
    text3: "In most programming languages, to assign a value to a variable, we use the equals (=) operator. Python follows this standard, so in Python, assigning a message to our variable looks like this:"
    codeblock1: "user_text = \"Billy was here\"\nprint(user_text)"
    text4: "At any time later in the program, you can change the value of <i>user_text</i> varaible again like so:"
    codeblock2: "user_text = \"Billy was here\"\nprint(user_text)\nuser_text = \"Have you seen Billy lately?\"\nprint(user_text)"
    text5: "The above code will create the output below:"
    codeblock3: "Billy was here\nHave you seen Billy lately?"
    question1:
      name: "question1"
      text: "For this question, create a variable called \"my_message\" with any message you want."
      type: "textbox"
      skeleton: ""
      button: "submit"
      correct: "contains"
      contains: 
       - "="
       - "my_message"
      chal_id: "0002"
    subheading2: "Naming Variables"
    text6: "You can name a variable almost anything you want, but there are a few guidelines youshould follow to prevent errors, and to make your program easier for humans to read andunderstand. After all, programming languages are for people, not for computers, so weshould always be thinking about the people trying to understand our code when we create variables."
    list1:
      item1: "Variable names can contain only letters, numbers, and underscores."
      item2: "You can start a variable name with a letter or an underscore, but not with a number. So variable_1 and _variable1 are both ok, but 1_variable won't work."
      item3: "Variable names are case sensitive: string and String are two different variables to a computer."
      item4: "You shouldn't use Python's built-in keywords or functions as variable names, such as print or break."
      item5: "Keep your variable names short but descriptive. A variable called this_is_a_really_long_and_pointlessly_verbose_variable_name is probably a bit long in most contexts, but likewise a variable called a doesn't tell us much about what the variable's purpose is. Something short but also descriptive like username is much better"
    subheading3: "Variable Types"
    text7: "Every variable has its own \"type\" that decides what kind of data it can store. Some of the most common data types are:"
    list2:
      item1: "string: A series of characters (basically, text). Note that these are always surrounded by quotes. If it isn't in quotes, it isn't a string."
      item2: "integer: A whole number (could be positive or negative), e.g.: -2, -1, 0, 1, 2, 3..."
      item3: "float: A number with a decimal point, eg: 3.14, 56.99998"
      item4: "boolean: A True or False value. In some programming languages, booleans can be represented as 1 (True) and 0 (False)"
    text8: "In Python, if you're not sure what type your variable is at any given moment in your program, you can always check using the <i>type()</i> method."
    codeblock4:  "variable_1 = \"42\"\nvariable_2 = 42\nvariable_3 = 4.2\nvariable_4 = True\n\nprint(type(variable_1))\nprint(type(variable_2))\nprint(type(variable_3))\nprint(type(variable_4))\n"
    text9: "Notice the capital \"T\" in \"True\" for the boolean we have assigned as variable_4? If you don't use an uppercase \"T\", the program will error because in Python boolean values are case sensitive. You must use \"True\" or \"False\", not \"true\" or \"false\"."
strings:
  name: "Manipulating Strings"
  text: "Strings are quite simple, but you can do a lot with this type of data. A string is a series of characters, such as a word or a sentence"
  page:
    list1:
      item1: "This is a string"
      item2: "So this is also a string"
      item3: "<p>Text inside a paragraph tag</p> is also a string if we want it to be."
      item4: "lu3hd6h3309&%34-0+ is - you guessed it - a string."
#    subheading1: "Strings, quotes, and escaping"
#    text1: "In Python, anything inside quotes (\" \") or (' ') is a string. The ability to use either a single or double quote gives us some flexibility in Python, for instance:"
#    codeblock1: "sentence_1 = \"Bob and Bill met for coffee at Starbucks.\"\nsentence_2 = \"James rushed by and accidentally knocked Bill's coffee on the floor.\"\nsentence_3 = '\"Oops, let me buy you a new coffee!\" said James.'"
#    text2: "In sentence_2 we needed to use a single quote as an apostrophe inside the string, so we wrapped the string in double quotes. In sentence_3 however, we needed to use the double quotes in the string, so we wrapped the string in single quotes. ^lb^^lb^But what would we do if we need to use both single and double quotes in our string?"
#    codeblock2: "sentence_4 = '\"I spilled Bill's coffee,\" said James.'\nprint(sentence_4)\n"
#    codeblock3: "File \"program.py\", line 1\nsentence_4 = '\"I spilled Bill's coffee,\" said James.'\n                             ^\nSyntaxError: invalid syntax"
#    text3: "The string stored in sentence_4 uses both double quotes and single quotes as part of the string. In situations like this, we need to escape the quote within the string that's used as an apostrophe, otherwise the program will think our string is finished after the \"l\" in"
#    text4: "We escape a character by using the backward slash (\\). The backslash tells our program that the character immediately following it should be interpreted as part of the string rather than a signifier that the string has ended. ^lb^^lb^But what if we need to escape a backslash?"
#    codeblock4: "sentence_5 = \"The backslash character '\\' escapes things.\""
#    text5: "If we try printing out the above, it will print The backslash character '' escapes things. which isn't quite what we meant. In this case, we need another backslash. "
#    text6: "Be careful when using backslashes, as it's easy to cause an error if you don't pay attention to when your backslashes need to be escaped:"
#    codeblock5: "print(\"This can happen if you use a \\\")"
#    text7: "The above gives you the below error:"
#    codeblock6: "print(\"This can happens if you use a \\\")\n                                     ^\nSyntaxError: EOL while scanning string literal"
    subheading2: "Combining Strings"
    text8: "Python lets us combine multiple strings together into one. In programming, combining strings is usually called \"concatenating\" strings"
    codeblock7: "first_name = 'Ada'\nlast_name = 'Lovelace'\nfull_name = first_name + ' ' + last_name\nprint(full_name)\n"
    text9: "The above example will output \"Ada Lovelace\" by concatenating 3 strings together: \"Ada\", the string held in the first_name variable; \"Lovelace\", the string held in the last_name variable; and a space, which we insert manually between these two strings."
    question1:
      name: "question1"
      text: "Create two variables called \"first_name\" and \"last_name\" with your first name in \"first_name\" and your last name in \"last_name\"."
      type: "textbox"
      skeleton: ""
      button: "submit"
      correct: "contains"
      contains: 
       - "="
       - "last_name"
       - "first_name"
      chal_id: "0003"
    subheading3: "Adding and Stripping Whitespace"
    text10: "A \"whitespace\" refers to a type of character that doesn't print anything out, but adds some sort of spacing formatting to the output. The spacebar, tab key, and return key on your computer all create a different kind of \"whitespace\". We can add whitespace to our programs to format our output. Let's output our list of wellknown agents so that each agent appears on a different line using the \\n character combination to tell the program where we want our line breaks. "
    codeblock8: "user_list = \"Bill\\nBob\\nSarah\\nMike\"\nprint(user_list)"
    text11: "The above will print:"
    codeblock9: "Bill\nBob\nSarah\nMike\n"
    question2:
      name: "question1"
      text: "Concatanate your favorite restaurant with a new line and your favorite food after the new line. Then print the variable to the screen"
      type: "textbox"
      skeleton: ""
      button: "submit"
      correct: "contains"
      contains: 
       - "="
       - "print"
       - "\n"
      chal_id: "0004"
arithmetic:
  name: "Math"
  text: "Your favorite subject: MATH!"
  page:
    text1: "When programming, numbers are very useful to us. We use them to perform mathematical comparisons of data, track our score in games, count things, and so on. Python treats numbers in a few different ways depending on how we use them."
    subheading1: "Integers"
    text2: "Integers are whole numbers, and don't have a decimal in them. They can be positive or negative. Just like on a calculator, you can add (+), subtract (-), multiply (*), divide (/), modulus (%), and power (**) integers in Python."
    codeblock1: "print(4 + 2)\nprint(4 - 2)\nprint(4 * 2)\nprint(4 / 2)"
    text3: "For each print() function above, the program will output the result of the mathematical operation we put in. This will output:"
    codeblock2: "6\n2\n8\n2\n"
    text4: "We can also use exponential operations, like 10 to the power of 4:"
    codeblock3: "print(10 ** 4)"
    text5: "Which results in:"
    codeblock4: "10000"
    text6: "We can also get the modulus, which allows us to return the remainder left over after we divide"
    codeblock5: "print(10 % 3)"
    text7: "This will divide 10 by 3, then print out the remainder leftover from that arithmetic."
    codeblock6: "1"
    text8: "Python allows us to specify the order we'd like to do our calculation in as well, using parenthesis to prioritise what operations we want done first."
    codeblock7: "print(8 + 4 * 10)\nprint((8 + 4) * 10)"
    question1:
      name: "question1"
      text: "Do the following math operations and print them to the screen:^lb^Add 1 and 1^lb^Subtract 4 from 10^lb^Multiply 2.5 by 2^lb^Divide 20 by 2^lb^Raise 2 to the power of 4^lb^And find the remainder when 50 is divided by 4"
      type: "textbox"
      skeleton: ""
      button: "submit"
      correct: "2\n6\n5.0\n10.0\n16\n2"
      chal_id: "0005"
lists:
  name: "Lists"
  text: "Perfect for your grocery list"
  page:
    text1: "A list is exactly what it sounds like; a list of things stored in a particular order. It could be anything: the numbers from 1 - 10; a list of animals; all the nail polish colours you could name... for example"
    codeblock1: "fav_linux_distros = ['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\nprint(fav_linux_distros)"
    text3: "If we print a list like we have above, we'll get the whole list returned to us like so:"
    codeblock2: "['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']"
    text4: "We probably won't find too much use for this list in this form: it will be more useful for us to be able to access individual items within this list using its index position within the list:"
    codeblock3: "fav_linux_distros = ['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\nprint(fav_linux_distros[0])\nprint(fav_linux_distros[1])\nprint(fav_linux_distros[2])"
    text5: "The above example will output:"
    codeblock4: "Mint\nDebian\nUbuntu"
    text6: "Note that when we want to access the very first item in the list, we use 0 instead of 1. This is true of most programming languages: whenever you're counting \"things\" in computer code, we always start with 0. So if we're looking for the fifth item in Mike's Linux distributions list, we'd use fav_linux_distros[4]. ^lb^^lb^What happens if we try to use an index outside the number of items in the list?"
    codeblock5: "fav_linux_distros = ['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\nprint(fav_linux_distros[7])"
    text7: "Here we've asked for the item in the list at index 7... but we only have 6 items in the list. If nothing exists at the index we've requested, we'll get a IndexError error back instead."
    codeblock6: "Traceback (most recent call last):\nFile \"program.py\", line 3, in <module>\nprint(fav_linux_distros[7])\nIndexError: list index out of range\n"
    text8: "Python also gives us a shortcut way of getting the very last item in a list"
    codeblock7: "fav_linux_distros = ['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\nprint(fav_linux_distros[-1])"
    text8: "By asking for an item at the index of -1, Python will always return the last item in the list. This is helpful because we don't always know how long our list will be. This syntax extends to other negative index methods as well, letting you count backward from the end of the list rather than forward from the front. Let's try it out."
    codeblock7: "fav_linux_distros = ['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\nprint(fav_linux_distros[4])\nprint(fav_linux_distros[-2])"
    text9: "This code will output:"
    codeblock8: "Fedora\nFedora"
    text10: "When we pluck an item from a list like this, we also get its individual item type. In the Linux distributions example we get a string, which we can then manipulate as a string using our various string manipulation tools."
    codeblock9: "fav_linux_distros = ['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\ntop_fav_distro = fav_linux_distros[0]\nprint(\"Mike's favourite Linux distro is \" + top_fav_distro.upper() + \"!\")"
    text11: "This gives us a string where we've modified an item from our list to appear in all uppercase, to best communicate how much Mike loves Mint."
    codeblock10: "Mike's favourite Linux distro is MINT!"
    text12: "We can also get a quick count of the things in our list by using the len() function"
    codeblock11: "fav_linux_distros = ['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\nprint(len(fav_linux_distros))"
    text13: "This will print out 6 which is indeed the number of items in Mike's list."
    question1:
      name: "question1"
      text: "Create a list of your favorite foods. Then save the last item concatanated with a space (\" \") and the second item in the list. Then print the variable."
      type: "textbox"
      skeleton: ""
      button: "submit"
      correct: "contains"
      contains:
       - "[-1]"
       - "[1]"
       - "print("
       - "="
      chal_id: "0006"
modifyingLists:
  name: "Changing Lists"
  text: "Do you need to change something on your grocery list?"
  page:
    subheading1: Modifying a List
    text1: "What happens when Agent M wants to update the list of Linux distributions? How do we modify the list we have with new information?"
    codeblock1: "fav_linux_distros = ['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\nprint(fav_linux_distros)\nfav_linux_distros[0] = 'Elementary'\nprint(fav_linux_distros)"
    text3: "We've created a list and saved it to the variable fav_linux_distros, with Mint as the first item in the list. Then we've changed the value of the first item to Elementary.^lb^^lb^ We've printed the list out before and after we've made the change so you can see what it looks like at both stages. Only the first item in the list has changed; everything else remains the same"
    codeblock2: "['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\n['Elementary', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']"
    text4: "We can also modify a list by applying a sort to it. Mike likes things to be nice and orderly, so let's sort this list of Linux distros alphabetically."
    codeblock3: "fav_linux_distros = ['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\nfav_linux_distros.sort()\nprint(fav_linux_distros)"
    text5: "As we hoped, this gives us:"
    codeblock4: "['Arch', 'Debian', 'Fedora', 'Manjaro', 'Mint', 'Ubuntu']"
    text6: "And afterwards, if we want to frustrate Agent M we can always reverse this list"
    codeblock5: "fav_linux_distros = ['Mint', 'Debian', 'Ubuntu', 'Manjaro', 'Fedora', 'Arch']\nfav_linux_distros.sort()\nprint(fav_linux_distros)\nfav_linux_distros.reverse()\nprint(fav_linux_distros)\n"
    text7: "Our output from the above code would be:"
    codeblock6: "['Arch', 'Debian', 'Fedora', 'Manjaro', 'Mint', 'Ubuntu']\n['Ubuntu', 'Mint', 'Manjaro', 'Fedora', 'Debian', 'Arch']\n"
    question1:
      name: "question1"
      text: "Create a list with your favorite places to go. Save this list in a variable called <i>my_Favorite_Places</i>."
      type: "textbox"
      skeleton: ""
      button: "submit"
      correct: "contains"
      contains:
       - "my_Favorite_Places"
       - "="
       - "["
       - "]"
      chal_id: "0007"
    subheading2: "Adding Items to Lists"
    text8: "There are a few different ways to add things to lists. Let's start by simply adding things onto the end of our list."
    codeblock7: "travel_bucket_list = ['Tokyo', 'Hawaii', 'London']\ntravel_bucket_list.append('New York')\ntravel_bucket_list.append('Berlin')\nprint(travel_bucket_list)"
    text8: "Here we use the append() method, which allows us to stick items onto the end of a list. When we print out our list after appending our new items, we can indeed see they've been added."
    codeblock7: "['Tokyo', 'Hawaii', 'London', 'New York', 'Berlin']"
    text9: "We can even start with an empty list."
    codeblock8: "travel_bucket_list = []\ntravel_bucket_list.append('Toronto')\ntravel_bucket_list.append('Barcelona')\ntravel_bucket_list.append('Dubai')\nprint(travel_bucket_list)"
    text10: "As expected, we've taken an empty list in line 1, and turned it into a list with 3 items, by appending them one by one."
    codeblock9: "['Toronto', 'Barcelona', 'Dubai']"
    text11: "We can also add items into an existing list at any position we want. Let's try adding a new item to the front of our travel bucket list."
    codeblock10: "travel_bucket_list = ['Tokyo', 'Hawaii', 'London']\ntravel_bucket_list.insert(0, 'New York')\nprint(travel_bucket_list)"
    text12: "Now we've put New York to the front of our list, and bumped everything else down one. Our output shows us our new list:"
    codeblock11: "['New York', 'Tokyo', 'Hawaii', 'London']"
    question2:
      name: "question2"
      text: "Use the list from the previous question and add an element. Print the list to the screen to see the results."
      type: "textbox"
      skeleton: ""
      button: "submit"
      correct: "contains"
      contains:
       - ".append("
       - "="
       - "["
       - "]"
      chal_id: "0008"
    subheading3: Removing Items from Lists
    text13: "Sometimes we want to remove an item from our list, for instance, if we travelled to one of the places on our travel bucket list. Let's remove 'London' from our list. "
    codeblock12: "travel_bucket_list = ['Tokyo', 'Hawaii', 'London']\nvisited = travel_bucket_list.pop()\nprint(travel_bucket_list)\nprint(visited)"
    text14: "We can see how we've changed our list, and also that we've been able to \"pop\" London out of the list into the variable visited so that we can continue to use it later in our program if we want. "
    codeblock13: "['Tokyo', 'Hawaii']\nLondon"
    text15: "The pop() method has taken the last item from the list and \"popped\" it off. If we wanted to remove a different item from the list, we can use pop() with an index to specify which item we want popped out. "
    codeblock14: "travel_bucket_list = ['Tokyo', 'Hawaii', 'London']\nvisited = travel_bucket_list.pop(1)\nprint(\"I recently went to \" + visited)\nprint(travel_bucket_list)"
    text16: "This outputs:"
    codeblock15: "I recently went to Hawaii\n['Tokyo', 'London']"
    text17: "What if we don't know what the position is of the thing we want to remove? Perhaps we wrote our list a long time ago, and can't remember what index position \"Hawaii\" is at. How do we remove Hawaii from our list then? Voila:"
    codeblock16: "travel_bucket_list = ['Tokyo', 'Hawaii', 'London']\ntravel_bucket_list.remove('Hawaii')\nprint(travel_bucket_list)"
    text18: "The remove() method will allow us to remove an item from our list without specifying an index. A very handy method to remember. As expected, the above code gets us the following output: "
    codeblock17: "['Tokyo', 'London']"
    question3:
      name: "question3"
      text: "Use the list from the other two questions and remove one of the elements. Print the list to the screen to see the results."
      type: "textbox"
      skeleton: ""
      button: "submit"
      correct: "contains"
      contains:
       - ".remove("
       - "="
       - "["
       - "]"
      chal_id: "0009"
comments:
  name: "Commenting Code"
  text: "Ever forget how you coded something?"
  page:
    text1: "Code comments are a prime example of how programming languages are mostly for us humans, as they are entirely for humans alone. Code comments are pieces of information you put in the code that the computer ignores. This allows us to add notes and narration into our code without having to worry about syntax, to help make it clear to ourselves - and to others - what our program is intended to do"
    codeblock1: "# Say hello to the user\nprint(\"Hello User!\")"
    text2: "You can also add a comment inline next to the greeting like this:"
    codeblock2: "print(\"Hello User!\")# Say hello to the user"
    text3: "In the output of both the above examples, we see just the printed \"Hello User!\" statement and no indication of our commented line above it, or the commented text next to it."
    codeblock3: "Hello User!"
    text4: "Comments can be very useful to us when our code starts to get complicated, or during the \"building\" stages when we're still figuring out how to get our program to work. ^lb^^lb^If you need to add several lines of comments in a block, you can use the # notation before each new line"
    codeblock4: "# One comment line\n# Second comment line\n# Third comment line\nprint(\"Hello!\")\n"
    subheading: "When to Use Comments"
    list1:
      item1: "When you're building a new program^lb^As we're trying to build out code to complete a series of tasks - especially if that task is a complicated one - using comments as a way to think through the logic can be extremely helpful. We can remind ourselves what the goal is of a particularly tricky bit of code, and if we have to come back to work on our program again later, comments can help remind us what we're building, and where we got to when last we worked on it"
      item2: "Documenting your program for others^lb^Later on in this course we'll talk more about programming style and how to write clean, organised, well-structured code that shouldn't need lots of comments, but all programs benefit from an amount of inline documentation that code comments can provide. In particular, if you're working with other programmers, or if your program will need to be maintained by others in the future, code comments can help them understand what your program is doing, and the broader context for why you built the program the way you did if it's important."
      item3: "When you want to temporarily \"turn off\" parts of your code^lb^Sometimes while building or debugging, it can be helpful to quickly turn on or off smaller chunks of our code. Instead of deleting the code, or copy-pasting it somewhere else, then having to re-write it or remember where in the program it was meant to go, we can simply comment the code out inline."
    codeblock5: "print(\"Hello Bill.\")\n# print(\"Hello Susan.\")\nprint(\"Hello Mike.\")"
    text5: "In the example above, we've commented out the print(\"Hello Susan\") line, which means when we run this program, the computer will skip over that entire line and only print the \"Hello Bill\" and \"Hello Mike\" lines"
    question1:
      name: "question1"
      text: "Write some print statements with sentences inside. Then comment them out to see the effect of commenting code."
      type: "textbox"
      skeleton: "#print(\"\")"
      button: "submit"
      correct: "contains"
      contains:
       - "#"
       - "print("
      chal_id: "0010"


#thirdCode:
#  name: "Third Code"
#  text: "In this module, you will to use variables."
#  page:
#    text: "This will be on the actual page of the module"
#    question1:
#      name: "question1"
#      text: "For your third challenge, you will print variables. Think of this as the variable \"x\" from math. You are able to store any value you want; sentences, numbers, True or False, characters and objects (all of which will be covered later in the course)."
#      type: "textbox"
#      skeleton: ""
#      button: "submit"
#      correct: "contains"
#      contains: 
#       - "="
#       - "x"
#      chal_id: "0003"